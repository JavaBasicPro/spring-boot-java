面向对象设计的编码原则:

S: 单一责任原则
    一个类只能一种类型责任，当这个类需要承担其他类型的责任时就需要分解该类
O: 开放、封闭原则
    实体可扩展但不可修改（对扩展开放、对修改关闭）—》通过抽象化来保证
L :里氏替换原则
    是对开闭原则的补充，
I: 接口分离原则
    提供尽可能小的单独的接口，不要提供大的总接口
D: 依赖倒置原则
  开闭原则是目的，而实现开闭原则要坚持依赖倒置原则
1. 高层模块不应该依赖于低层模块，二者都应该依赖于抽象
2. 抽象不应该依赖于细节，细节应该依赖于抽象

设计模式分类：

1、创建模式
2、结构模式：描述如何将类或者对象结合在一起形成更大的结构，分为：类的结构模式和对象的结构模式
  （1）类的结构模式：使用继承把类、接口等组合在一起形成更大的结构，是静态的
  如：适配器模式
   （2）对象的结构模式：怎样把各种不同类型的对象组合在一起，以实现新的功能方法，是动态的
如：代理模式、合成模式、享元模式、装饰模式以及对象形式的适配器模式
3、行为模式

依赖倒置原则：
  代码中减少对于具体类的依赖，要依赖抽象，不要依赖具体类；
  避免违反依赖倒置的方法：
     变量不可以持有具体类的引用；
     不要让类派生自具体类；


4、依赖：一个类依赖与另一个类的定义，依赖关系总是【单向的】，简单理解为：类A使用到了类B，而这种关系是非常弱的,类B的变化会影响到类A;
在代码中体现为：局部变量、方法中的参数和对静态方法的调用，如:类A的方法  void depend(类 B)
使用虚线箭头表示

5、关联关系：类与类之间的联接，一个类知道另一个类的属性和方法; 单箭头表示 单向关联；不用箭头表示 双向关联，是一种强的依赖关系
class A{

  private  类 B；
}
6、聚合关系：强的关联关系，是整体与个体的关系,即：has-a的关系，整体与部分可以分离，具有各自的生命周期；在代码上的表现是一致的，只能从语意上区分 关联关系和聚合关系
关系关系是 两个类处于相同的层次；聚合关系是两个类处于不平等的层次，一个表示【整体】一个表示【部分】，如：家与孩子
7、组合关系：是关联关系的一种特例，体现了 contains-a的关系，比聚合关系更强，也体现 整体与部分，但是这个整体与部分是不可分的，整体的生命周期结束则部分的生命周期也结束；
